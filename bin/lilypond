#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path("../lib", File.dirname(__FILE__))

require 'lyp/version'
require 'lyp'

$options, $argv = Lyp::Lilypond.preprocess_argv(ARGV)
$lilypond_path = Lyp::Lilypond.select_lilypond_version($options, ARGV.last)

if $options[:raw]
  exec("#{$lilypond_path} #{$argv.join(' ')}")
end

OVERRIDING_LILYPOND_SWITCHES = %w{
  -w --warranty
  -v --version
  scheme-sandbox
}
LILYPOND_HELP_SWITCHES = %w{
  -h --help -dhelp
}

LYP_LY_HELP = <<EOF
Lyp-provided options:
  -A, --auto-install-deps             install any missing dependencies
  -c, --cropped                       crop output (requires setting 0 margins)
  -E, --env                           use version specified in $LILYPOND_VERSION
  -F, --force-version                 use lilypond version specified in user file
  -m, --music-relative=MUSIC          enter music inline (relative pitch)
  -M, --music=MUSIC                   enter music inline (absolute pitch)
  -n, --install                       install the specified version if not found
  -O, --open                          open the target file after compilation
  -r, --require=PACKAGE               preload the specified package
  -R, --raw                           run raw lilypond (no pre-processing)
  -S, --snippet                       produce png cropped images at 600dpi
                                      (--cropped --png -dresolution=600)
  -u, --use=VERSION                   use the given version of lilypond
EOF

case $argv.first
when nil, *OVERRIDING_LILYPOND_SWITCHES
  STDERR.puts "Lyp version #{Lyp::VERSION}"
  exec("#{$lilypond_path} #{$argv.join(' ')}")

when *LILYPOND_HELP_SWITCHES
  STDERR.puts "Lyp version #{Lyp::VERSION}"
  puts `#{$lilypond_path} #{$argv.join(' ')}`
  puts LYP_LY_HELP unless $argv.first == '-dhelp'
else
  Lyp::Lilypond.check_update
  begin
    if $options[:resolve] && $argv.last != '-'
      resolver = Lyp::DependencyResolver.new($argv.last)
      tree = resolver.compile_dependency_tree(ignore_missing: true)
      tree.dependencies.each do |package, spec|
        Lyp::Package.install(spec.clause) if spec.versions.empty?
      end
    end

    Lyp::Lilypond.compile($argv, $options)
  rescue => e
    puts e.message
    puts e.backtrace.join("\n") if $options[:verbose]
  end
end
